// main function
func notmain() -> void
{


  // functions: calls
  a = myfunc(2*2) + 4;
  myfunc(arr[2]);
  myfunc(arr[2][2]);
  myfunc(arr[]);


  // variable declarations

  a().b().c = 3;
  a().b().c; // this is an error, variable should be assigned something
  a().b().c();
  a().b().c() = 2; // this is an error, cannot assign to a function
  let a: float;
  let b: string;
  let c: id;
  a = 2.01;
  b = thisisastring;
  let arr2d: integer[1][2];
  let arrErr: integer[];


  // function body: statements

  while (a == 2.01) {};
  while (a == 2.01) {
    write(a);
  };

  if (a == 2.01) then {
    write(a);
  } else {
    write(b);
  };

  read(file);

  // variable + idnest
  a(a).a = 1;
  a(a).b();
  a.b[a] = 1;
  a[a].b = 1;
  a[a].b[b] = 1;
  a.b[b][c] = 1;
  a[a][b].b = 1;
  a[a][b].b[a][b] = 1;
  a(a).b[a] = 1;
  a(a).b[a][b] = 1;
  a(a).b[getIndex(a)] = 1;

  // expressions

  a = not ((-2*(2+3)) >= -10);
}

func id() -> void
{
  id = id + 1;
}

impl implname {
    func funcname(arr: integer[5]) -> void {}
    func funcname2(arr: integer[5][2]) -> void {}
    func funcname3(arr: id) -> void {}
}

impl id {}; // this is an error, impl does not end with semicolon
impl id {}
func id () -> id {}; // this is an error, func does not end with semicolon
func id (a: integer) -> id {a = a*2;}
func id () -> void {} // no local variable declarations
func id () -> float {}
func id () -> integer {}
struct id inherits id {};
struct id inherits id , id {};
struct id inherits id , id , id {};
struct id inherits id , id , id , id {};


/* The following are test cases not covered in the polynomial/bubblesort files provided.

    classes
    --------------------------------------
|X| class declaration
|X| no member function declaration
|X| no member
|X| multiple inherited classes

    functions: definitions
    --------------------------------------
|X| no main function definition
|X| return type: integer

    functions: formal parameters
    --------------------------------------
|X| type: id
|X| type: n-dim array
|X| type: array (with size)

    functions: calls
    --------------------------------------
|X| parameters:0
|X| array parameter - n-dim
|X| array parameter - with size
|X| array parameter - without size (not allowed)
|X| function call as statement
|X| expression as parameter

    variable declaration
    --------------------------------------
|X| type: float
|X| type: string
|X| type: id
|X| type: n-dim array
|X| type: array (without size)

    function body: local variable declarations
    --------------------------------------
|X| no local variable declarations
|X| intertwined statements and variable declarations

    function body: statements
    --------------------------------------
|X| no statement
|X| 1 statement
|X| if: 1-statement then or else blocks
|X| while: empty block
|X| while: 1-statement block
|X| read(<variable>) statement

    variable + idnest
    --------------------------------------
|X| id(id).id
|X| id(id).id()
|X| id.id[id]
|X| id[id].id
|X| id[id].id[id]
|X| id.id[id][id]
|X| id[id][id].id
|X| id[id][id].id[id][id]
|X| id(id).id[id]
|X| id(id).id[id][id]
|X| expression as array index

    expressions
    --------------------------------------
|X| involving multop
|X| involving addop + multop + relop
|X| involving parentheses
|X| involving nested parentheses
|X| involving not
|X| involving sign
|X| involving all the above in one expression
*/